name: Deploy
on:
  push:
    branches:
      - alpha
      # - beta
      # - main

env:
  PROJECT_ID: bcsol-a8522

jobs:

  deployStaging:
    runs-on: ubuntu-latest
    environment: Staging

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      # setup
      - uses: actions/checkout@v3
      - name: Use Node.js 16.x (LTS)
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm
      - run: npm ci

      # determine version
      - id: semantic-version
        run: npm run release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # default to the latest tag version if no new release
      - id: version
        run: |
          if [[ ${{ steps.semantic-version.outputs.new-release-published }} = 'true' ]]; then
            echo "New version: ${{ steps.semantic-version.outputs.new-release-version }}"
            echo '::set-output name=version::${{ steps.semantic-version.outputs.new-release-version }}'
          else
            LATEST_TAG=$(git describe --abbrev=0 --tags | tr -d v)
            echo "Existing version: ${LATEST_TAG}"
            echo "::set-output name=version::${LATEST_TAG} (Build ${{ github.run_number }}-${{ github.run_attempt	}})"
          fi

      # test
      # TODO
      # - run: npm test
      # - run: npm run lint

      # build
      - run: npm run build
        env:
          # GENERATE_SOURCEMAP: false
          REACT_APP_VERSION: ${{ steps.version.outputs.version }}
      
      # release
      - run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # deploy
      - id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          projectId: "${{ env.PROJECT_ID }}"
          expires: 30d
          channelId: staging

      # notify
      - uses: ./.github/actions/slack/
        if: always()
        with:
          success: ${{ steps.version.outcome == "success" && steps.deploy.outcome == "success" }}
          bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
          environment: Staging
          version: ${{ steps.version.outputs.version }}
          app_url: ${{ steps.deploy.outputs.details_url }}
          

  deployProd:
    runs-on: ubuntu-latest
    environment: Prod

    needs:
      - deployStaging

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 16.x (LTS)
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      # setup firebase CLI
      - run: npm install -g firebase-tools
      - run: firebase use ${PROJECT_ID} --token ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      # promote from staging to production
      - id: promote
        run: firebase hosting:clone ${PROJECT_ID}:staging ${PROJECT_ID}:live

      # notify
      - uses: ./.github/actions/slack/
        if: always()
        with:
          success: ${{ steps.promote.outcome == "success" }}
          bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
          environment: Prod
          version: ${{ needs.deployStaging.outputs.version }}
          # TODO
          app_url: https://todo

